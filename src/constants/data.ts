export const GRADES = ['大一', '大二', '大三', '大四'];
export const DIRECTIONS = [
  { label: '前端', value: 'frontend' },
  { label: '后端-Python', value: 'backend-python' },
  { label: '后端-Java', value: 'backend-java' },
  { label: 'AI能力提升', value: 'ai' },
  { label: '产品经理', value: 'pm' },
  { label: '算法与竞赛', value: 'algo' },
];

export type RouteStage = {
  title: string;
  skills?: string[];
  techs?: { name: string; desc: string }[];
  interviewTestId?: string;
  points?: string[];
  studyPeriod?: string;
};

// 每个阶段的详细测试题
export const STAGE_QUESTIONS: { [key: string]: string[] } = {
  // 大一前端-阶段1：计算机与互联网基础
  'freshman-frontend-1': [
    '计算机的基本组成部分有哪些？简述它们的功能。',
    '请解释HTTP和HTTPS的区别，以及HTTPS如何保证安全性。',
    '什么是DNS？它在互联网中扮演什么角色？',
    '简述常见的Web安全威胁（如XSS、CSRF）及其防护措施。',
    '描述一下你理解的客户端/服务器模式，并举例说明。'
  ],
  // 大一前端-阶段2：HTML基础与语义化
  'freshman-frontend-2': [
    '什么是HTML语义化？为什么它很重要？请举例说明几个语义化标签。',
    '请解释HTML5的新特性及其应用场景。',
    '如何使用HTML创建表单？描述几种常用的表单元素及其属性。',
    'HTML中的meta标签有什么作用？请列举几个常用的meta标签及其用途。',
    '如何在HTML中嵌入音频、视频和其他网页？请提供简单的代码示例。'
  ],
  // 大一前端-阶段3：CSS基础与布局
  'freshman-frontend-3': [
    '请解释CSS盒模型，并说明box-sizing属性的作用。',
    '如何使用Flexbox实现水平垂直居中？请提供代码示例。',
    '描述CSS选择器的优先级规则，并举例说明。',
    '什么是响应式设计？如何使用媒体查询实现响应式布局？',
    '请解释CSS Grid布局的基本概念，并提供一个简单的网格布局示例。'
  ],
  // 大一前端-阶段4：JavaScript基础语法
  'freshman-frontend-4': [
    'var、let和const有什么区别？请举例说明。',
    '请解释JavaScript中的数据类型，以及如何检测变量类型。',
    '什么是事件冒泡和事件捕获？如何阻止事件冒泡？',
    '如何使用JavaScript操作DOM？请提供几个常用的DOM操作方法示例。',
    '请解释JavaScript中的同步和异步编程，并举例说明。'
  ],
  // 大一前端-阶段5：JavaScript进阶与ES6+
  'freshman-frontend-5': [
    '什么是闭包？请举例说明闭包的应用场景。',
    '请解释JavaScript中this关键字的绑定规则。',
    '如何使用Promise处理异步操作？请提供代码示例。',
    '请解释ES6中的解构赋值、展开运算符和剩余参数。',
    'async/await与Promise相比有什么优势？如何使用它们处理异步操作？'
  ],
  // 大一前端-阶段6：前端开发工具与环境
  'freshman-frontend-6': [
    '什么是Git？请说明常用的Git命令及其作用。',
    '如何使用npm管理项目依赖？package.json文件的主要字段有哪些？',
    '请描述VSCode的主要功能和常用插件。',
    '如何使用Chrome开发者工具调试前端代码？请列举几个常用的调试技巧。',
    '什么是webpack？它在前端开发中起到什么作用？'
  ],
  // 大一前端-阶段7：网页交互与小型项目实践
  'freshman-frontend-7': [
    '如何实现表单验证？请提供一个简单的表单验证示例。',
    '请描述如何创建一个响应式导航栏，包括移动端的汉堡菜单。',
    '如何实现图片轮播效果？请简述实现思路。',
    '什么是事件委托？它有什么优势？请提供一个使用事件委托的示例。',
    '如何使用Fetch API或Axios发送网络请求？请提供代码示例。'
  ],
  // 大一前端-阶段8：基础算法与数据结构
  'freshman-frontend-8': [
    '如何分析算法的时间复杂度和空间复杂度？',
    '请实现一个数组去重的函数，并分析其时间复杂度。',
    '什么是栈和队列？它们在前端开发中有哪些应用？',
    '请实现一个简单的冒泡排序算法，并解释其工作原理。',
    '如何判断一个字符串是否为回文？请提供JavaScript实现。'
  ],
  // 大一前端-阶段9：前端面试准备与职业规划
  'freshman-frontend-9': [
    '请简述你的学习经历和掌握的前端技术栈。',
    '描述一个你完成的前端项目，包括技术选型、实现难点和解决方案。',
    '你认为成为一名优秀的前端工程师需要具备哪些能力？',
    '前端技术发展迅速，你如何保持学习和更新知识？',
    '你对未来的职业规划是什么？希望在哪些方面深入发展？'
  ]
};

export const ROUTES: { [key: string]: RouteStage[] } = {
  // 前端方向
  '大一-frontend': [
    {
      title: '计算机与互联网基础',
      skills: [
        '理解计算机系统基本组成与工作原理',
        '掌握互联网的发展历史与工作机制',
        '了解网络协议基础与通信原理',
        '认识信息安全与数据隐私的重要性',
        '具备基本的技术信息检索与学习能力'
      ],
      techs: [
        { name: '计算机组成原理', desc: '了解CPU、内存、存储设备等计算机硬件组成，理解操作系统、程序、数据的关系，掌握二进制与数据表示的基本概念，为后续学习打下基础。' },
        { name: '互联网原理', desc: '理解互联网的分层架构与工作原理，包括客户端/服务器模式、网络拓扑结构、域名系统(DNS)、IP地址等概念，了解互联网应用的基本类型与技术发展趋势。' },
        { name: '网络协议入门', desc: '掌握HTTP/HTTPS协议的基本原理，了解请求/响应模型、常见状态码、请求方法等核心概念，认识CDN、反向代理等常见网络架构模式。' },
        { name: '信息安全基础', desc: '了解常见的Web安全威胁（如XSS、CSRF等）与防护措施，认识数据加密与用户认证的基本原理，培养基本的安全意识与实践。' },
        { name: '技术学习方法', desc: '掌握技术文档阅读技巧，熟悉MDN、Stack Overflow等学习资源的使用方法，了解GitHub、技术社区的价值，建立高效的自学习惯与方法。' }
      ],
      interviewTestId: 'freshman-frontend-1',
      studyPeriod: '2-3周'
    },
    {
      title: 'HTML基础与语义化',
      skills: [
        '掌握HTML文档结构与基本标签',
        '理解HTML语义化标签的正确使用方法',
        '能构建清晰、结构化的网页内容',
        '了解HTML5新特性与API基础',
        '掌握表单元素与数据收集'
      ],
      techs: [
        { name: 'HTML文档结构', desc: '掌握DOCTYPE声明、html、head、body等基本结构标签的作用与嵌套规则，理解文档元数据(meta标签)的配置，建立正确的HTML文档结构概念。' },
        { name: '语义化标签', desc: '学习使用header、nav、main、section、article、footer等语义化标签组织网页内容，理解语义化对可访问性、SEO及代码可维护性的重要意义。' },
        { name: '文本与链接', desc: '掌握标题(h1-h6)、段落(p)、列表(ul/ol/li)、引用(blockquote)等文本标签，以及超链接(a)的属性和使用方法，能构建基本的文本内容结构。' },
        { name: '多媒体嵌入', desc: '学习图片(img)、音频(audio)、视频(video)、iframe等多媒体嵌入标签的使用，掌握响应式图片技术，理解多媒体资源优化的基本原则。' },
        { name: '表单与交互', desc: '掌握表单(form)及各类表单控件(input、select、textarea等)的属性与使用方法，理解表单验证、提交机制，能构建基本的数据收集界面。' }
      ],
      interviewTestId: 'freshman-frontend-2',
      studyPeriod: '3周'
    },
    {
      title: 'CSS基础与布局',
      skills: [
        '掌握CSS选择器与样式规则',
        '理解盒模型与布局原理',
        '熟练运用Flexbox/Grid布局',
        '掌握响应式设计基础',
        '能实现常见UI组件样式'
      ],
      techs: [
        { name: 'CSS基础语法', desc: '掌握CSS选择器(元素、类、ID、属性、伪类等)的语法与优先级规则，理解CSS属性值的单位与继承特性，能准确选择并修改元素样式。' },
        { name: '盒模型', desc: '深入理解盒模型(content、padding、border、margin)的概念与计算方式，掌握box-sizing属性的作用，能解决外边距重叠等常见问题，精确控制元素尺寸与间距。' },
        { name: 'Flexbox布局', desc: '掌握弹性盒子(Flexbox)布局的核心概念，如主轴、交叉轴、flex-grow/shrink/basis等属性，能熟练实现水平/垂直居中、等分布局、弹性导航栏等常见界面结构。' },
        { name: 'Grid布局', desc: '学习网格布局(Grid)的基本语法与概念，掌握网格容器、网格项的定义与配置方法，能实现复杂的二维布局设计，如图库、仪表盘等界面。' },
        { name: '响应式设计', desc: '理解响应式设计的核心原则，掌握媒体查询(media queries)的使用方法，学习移动优先的设计思路，能构建在不同设备上都有良好体验的界面。' }
      ],
      interviewTestId: 'freshman-frontend-3',
      studyPeriod: '4周'
    },
    {
      title: 'JavaScript基础语法',
      skills: [
        '掌握JavaScript数据类型与变量',
        '理解控制流与函数基础',
        '学会操作数组与对象',
        '理解DOM操作与事件处理',
        '掌握基础的异步编程概念'
      ],
      techs: [
        { name: '变量与数据类型', desc: '掌握JavaScript的基本数据类型(Number、String、Boolean、null、undefined、Symbol)与引用类型(Object、Array、Function)，理解变量声明(var/let/const)的区别，掌握类型转换与检测方法。' },
        { name: '控制流与循环', desc: '学习条件语句(if-else、switch)、循环结构(for、while、do-while)的语法与使用场景，掌握逻辑运算符、三元运算符等，能实现基本的程序逻辑与算法。' },
        { name: '函数基础', desc: '理解函数声明与表达式的区别，掌握参数传递、返回值、作用域等概念，学习箭头函数语法，初步了解闭包概念，能编写模块化、可重用的代码。' },
        { name: 'DOM操作', desc: '学习文档对象模型(DOM)的基本概念，掌握元素选择、创建、修改、删除的方法，理解DOM树结构，能通过JavaScript动态修改网页内容与样式。' },
        { name: '事件处理', desc: '理解浏览器事件模型，掌握事件监听、事件对象、事件冒泡与捕获的概念，学习常见的用户交互事件(click、submit、load等)的处理方法，实现交互式网页功能。' }
      ],
      interviewTestId: 'freshman-frontend-4',
      studyPeriod: '5周'
    },
    {
      title: 'JavaScript进阶与ES6+',
      skills: [
        '理解作用域、闭包与this绑定',
        '掌握ES6+关键特性与语法糖',
        '学会使用Promise处理异步操作',
        '掌握面向对象编程基础',
        '了解模块化开发与导入导出'
      ],
      techs: [
        { name: '作用域与闭包', desc: '深入理解JavaScript的作用域链、执行上下文、变量提升等核心概念，掌握闭包的形成条件与使用场景，能利用闭包创建私有变量、函数工厂、回调函数等。' },
        { name: 'this绑定机制', desc: '学习this关键字的绑定规则(默认绑定、隐式绑定、显式绑定、new绑定)，掌握call、apply、bind方法的使用，理解箭头函数的this特性，解决常见的this指向问题。' },
        { name: 'ES6+新特性', desc: '掌握ES6及以上版本的关键特性，包括let/const块级作用域、解构赋值、模板字符串、默认参数、剩余参数、展开语法等，提升代码的简洁性与可读性。' },
        { name: '异步编程', desc: '理解JavaScript的事件循环机制，掌握Promise对象的创建与链式调用，学习async/await语法简化异步代码，能处理网络请求、定时操作等异步场景。' },
        { name: '模块化开发', desc: '了解JavaScript模块化发展历程，学习ES Modules的import/export语法，理解模块作用域与导入导出机制，能构建模块化的应用结构，提高代码组织性与可维护性。' }
      ],
      interviewTestId: 'freshman-frontend-5',
      studyPeriod: '4周'
    },
    {
      title: '前端开发工具与环境',
      skills: [
        '掌握Git版本控制基础操作',
        '学会使用VSCode高效开发',
        '熟悉npm/yarn包管理工具',
        '掌握Chrome开发者工具调试技巧',
        '了解前端自动化构建基础'
      ],
      techs: [
        { name: 'Git版本控制', desc: '掌握Git的基本概念(仓库、提交、分支)与常用命令(init、add、commit、push、pull、clone等)，学习分支管理与合并冲突解决，能使用GitHub/GitLab进行协作开发与代码管理。' },
        { name: 'VSCode开发环境', desc: '熟悉VSCode界面与核心功能，学习常用快捷键与工作区配置，掌握Live Server、ESLint、Prettier等插件的安装与使用，提高编码效率与代码质量。' },
        { name: '包管理工具', desc: '了解npm/yarn的基本概念与使用方法，掌握package.json的配置项与依赖管理，学习常用npm脚本命令，能安装、更新、卸载第三方库，管理项目依赖。' },
        { name: '浏览器开发工具', desc: '掌握Chrome DevTools的核心功能，包括元素查看与修改、控制台调试、网络请求分析、性能监控等，能高效定位与解决前端开发中的常见问题。' },
        { name: '前端构建工具入门', desc: '了解webpack/vite等构建工具的基本概念与作用，理解模块打包、资源处理、开发服务器的概念，为后续学习前端工程化打下基础。' }
      ],
      interviewTestId: 'freshman-frontend-6',
      studyPeriod: '3周'
    },
    {
      title: '网页交互与小型项目实践',
      skills: [
        '实现表单验证与数据处理',
        '开发交互式导航与菜单组件',
        '创建轮播图与图片预览功能',
        '实现拖放与动画交互效果',
        '整合API调用与数据展示'
      ],
      techs: [
        { name: '表单交互开发', desc: '实现表单验证、数据收集与提交功能，掌握正则表达式的基本语法与验证模式，学习表单控件的状态管理与错误提示，提升用户表单填写体验。' },
        { name: '导航组件开发', desc: '创建响应式导航栏、下拉菜单、手风琴菜单等导航组件，实现平滑滚动、高亮当前位置等功能，提升网站的可导航性与用户体验。' },
        { name: '多媒体交互', desc: '开发图片轮播、图片预览、视频播放控制等多媒体交互功能，学习媒体资源的延迟加载与性能优化技术，增强网页的视觉吸引力与内容表现力。' },
        { name: 'DOM动画与特效', desc: '使用CSS过渡/动画结合JavaScript实现交互式动画效果，掌握拖放操作、滚动特效、悬停交互等技术，增强用户界面的动态反馈与交互体验。' },
        { name: 'API数据集成', desc: '学习使用Fetch API/Axios发起网络请求，处理JSON数据，实现数据的获取、展示、筛选、分页等功能，构建数据驱动的动态网页应用。' }
      ],
      interviewTestId: 'freshman-frontend-7',
      studyPeriod: '4-5周'
    },
    {
      title: '基础算法与数据结构',
      skills: [
        '理解时间复杂度与空间复杂度',
        '掌握数组与字符串的常见操作',
        '学习栈、队列等基础数据结构',
        '实现排序与查找的基本算法',
        '解决前端开发中的常见算法问题'
      ],
      techs: [
        { name: '复杂度分析', desc: '理解算法效率的度量方法，掌握大O表示法，学会分析时间复杂度与空间复杂度，为选择合适的算法与数据结构奠定基础。' },
        { name: '数组与字符串算法', desc: '掌握数组与字符串的基本操作与常见算法，如遍历、查找、排序、去重、回文判断、子串操作等，解决前端开发中的数据处理问题。' },
        { name: '栈与队列', desc: '理解栈(LIFO)与队列(FIFO)的特性与JavaScript实现方法，掌握它们在算法中的应用，如括号匹配检查、表达式求值、事件队列模拟等。' },
        { name: '排序与查找', desc: '实现冒泡排序、选择排序、插入排序等基本排序算法，掌握二分查找等高效查找方法，理解JavaScript原生排序方法的工作原理与使用技巧。' },
        { name: '递归思想', desc: '理解递归的核心概念与实现模式，掌握递归与迭代的转换方法，学习分治策略，解决树形结构遍历、路径查找等递归特性问题。' }
      ],
      interviewTestId: 'freshman-frontend-8',
      studyPeriod: '3-4周'
    },
    {
      title: '前端面试准备与职业规划',
      skills: [
        '掌握前端基础知识点梳理与答题技巧',
        '准备个人项目与代码展示',
        '学习自我介绍与技术沟通',
        '了解前端岗位需求与职业路径',
        '制定个性化学习计划与目标'
      ],
      techs: [
        { name: '前端基础面试题', desc: '系统梳理HTML/CSS/JavaScript核心概念与常见面试题，包括语义化、盒模型、选择器、作用域、闭包、事件循环等知识点，形成结构化的知识框架。' },
        { name: '项目准备', desc: '学习如何包装与展示个人项目，提炼技术要点与解决方案，准备项目Demo与代码仓库，展示个人的动手能力与技术理解。' },
        { name: '自我介绍准备', desc: '掌握技术面试中自我介绍的结构与要点，学会简洁清晰地表达个人技术栈、学习经历与项目经验，给面试官留下专业印象。' },
        { name: '模拟面试实战', desc: '通过角色扮演模拟技术面试场景，练习常见问题的回答与现场编码，获取反馈并改进，增强面试信心与应对能力。' },
        { name: '职业规划', desc: '了解前端开发的职业发展路径与技术方向，认识初级、中级、高级前端工程师的能力要求差异，制定个人的职业目标与学习计划。' }
      ],
      interviewTestId: 'freshman-frontend-9',
      studyPeriod: '2-3周'
    }
  ],
  // 后端-Python方向
  '大一-backend-python': [
    {
      title: '计算机与互联网基础',
      skills: [
        '理解计算机原理与互联网工作机制',
        '掌握操作系统基础知识',
        '建立网络通信与协议基本概念'
      ],
      techs: [
        { name: '计算机组成原理', desc: '了解计算机硬件组成、CPU工作原理、存储体系等基础知识，理解二进制数据表示与基本运算逻辑，掌握计算机系统的层次结构。' },
        { name: '操作系统基础', desc: '理解操作系统的核心概念，包括进程管理、内存管理、文件系统等，掌握Linux基本命令与Windows系统管理，为后端开发打下基础。' },
        { name: '互联网原理', desc: '了解互联网发展历史与架构，理解客户端/服务器模式、域名系统、IP地址等基本概念，掌握网络分层模型与协议族。' },
        { name: '网络通信基础', desc: '掌握HTTP/HTTPS协议原理，理解请求/响应模型，了解常见状态码与请求方法，认识REST风格API的基本概念。' },
        { name: '信息安全初识', desc: '了解计算机与网络安全基础知识，认识常见安全威胁与防护措施，理解数据加密与身份验证的基本原理。' }
      ],
      studyPeriod: '3周'
    },
    {
      title: 'Python零基础入门',
      skills: [
        '掌握Python基本语法与数据类型',
        '能熟练使用条件、循环等流程控制',
        '理解并能编写基础函数'
      ],
      techs: [
        { name: 'Python环境搭建', desc: '学习安装Python解释器、配置开发环境、使用pip包管理工具，掌握IDLE和Jupyter Notebook基本用法，为Python学习做好准备。' },
        { name: '变量与数据类型', desc: '掌握Python的基本数据类型（整数、浮点数、字符串、布尔值）及其操作方法，理解变量赋值、类型转换，熟悉字符串格式化与常用方法。' },
        { name: '运算符与表达式', desc: '熟练使用Python的算术、比较、逻辑运算符，理解运算符优先级与结合性，能编写复杂表达式并准确预测计算结果。' },
        { name: '流程控制语句', desc: '掌握if-elif-else条件判断、for循环、while循环的语法与使用场景，理解循环中的break/continue语句，能处理各类条件分支与迭代需求。' },
        { name: '函数基础', desc: '理解函数的定义与调用方式，掌握参数传递（位置参数、关键字参数、默认参数）与返回值机制，能编写简单函数实现代码复用。' }
      ],
      studyPeriod: '4周'
    },
    {
      title: 'Python进阶编程',
      skills: [
        '掌握面向对象编程思想与实践',
        '熟练使用模块与包组织代码',
        '能有效处理程序异常与错误'
      ],
      techs: [
        { name: '面向对象编程', desc: '理解类与对象的概念，掌握类的定义、实例化、属性与方法的使用，学习封装、继承、多态等面向对象核心特性，能用OOP思想设计简单程序。' },
        { name: '模块与包', desc: '学习Python模块的导入与使用方法，理解包的组织结构与__init__.py文件的作用，掌握相对导入与绝对导入，能构建多模块的Python项目。' },
        { name: '异常处理', desc: '掌握try-except-else-finally异常处理结构，理解Python常见异常类型及其层次关系，学会自定义异常类，编写健壮的错误处理代码。' },
        { name: '文件操作', desc: '掌握文件的打开、读写、关闭操作，理解不同文件模式与编码设置，能处理文本文件与二进制文件，实现数据的持久化存储。' },
        { name: '高级数据结构', desc: '深入学习列表、元组、字典、集合的特性与操作方法，理解列表推导式、生成器表达式等Pythonic语法，能选择合适的数据结构解决问题。' }
      ],
      studyPeriod: '3-4周'
    },
    {
      title: '开发工具与环境',
      skills: [
        '熟练使用Python专业开发工具',
        '掌握虚拟环境与依赖管理',
        '理解版本控制与协作基础'
      ],
      techs: [
        { name: 'IDE使用技巧', desc: '熟练使用PyCharm或VS Code进行Python开发，掌握代码补全、重构、调试等高效功能，配置代码风格检查与格式化工具，提升开发效率。' },
        { name: '虚拟环境管理', desc: '理解Python虚拟环境的概念与作用，掌握venv/virtualenv的创建与激活方法，学习使用requirements.txt管理项目依赖，解决不同项目的环境隔离问题。' },
        { name: 'Git版本控制', desc: '学习Git基础命令（init、add、commit、push、pull等），理解分支管理与合并操作，掌握GitHub/GitLab基本协作流程，实现代码版本管理与团队协作。' },
        { name: '代码规范', desc: '了解PEP 8 Python编码规范，使用pylint、flake8等工具检查代码质量，养成良好的编码习惯，提高代码可读性与可维护性。' },
        { name: '项目结构设计', desc: '学习Python项目的目录结构组织方法，理解配置文件、文档、测试的标准布局，为后续开发大型项目做准备。' }
      ],
      studyPeriod: '2-3周'
    },
    {
      title: 'Web开发基础',
      skills: [
        '理解Web应用工作原理',
        '掌握Flask框架基础开发',
        '能实现简单的Web服务与界面'
      ],
      techs: [
        { name: 'Flask入门', desc: '学习Flask微框架的基本概念与使用方法，创建第一个Flask应用，理解路由系统、视图函数、请求上下文等核心组件，掌握Flask应用的配置方式。' },
        { name: '路由与视图', desc: '深入学习Flask路由系统，掌握URL构建、动态路由、HTTP方法限制等功能，理解视图函数的编写规范与返回值处理，实现RESTful API的基础。' },
        { name: '模板渲染', desc: '学习Jinja2模板引擎的语法与使用方法，掌握模板继承、条件渲染、循环控制等技术，理解模板与后端的数据传递机制，实现动态网页生成。' },
        { name: '表单处理', desc: '掌握HTML表单的基本结构，学习Flask-WTF扩展的使用方法，实现表单验证、CSRF保护、文件上传等功能，提高Web应用的交互性与安全性。' },
        { name: '静态资源管理', desc: '了解CSS/JavaScript等静态资源在Flask中的组织与引用方式，学习Flask-Assets等工具优化静态资源加载，提升Web应用性能。' }
      ],
      studyPeriod: '4周'
    },
    {
      title: '数据库基础',
      skills: [
        '理解关系型数据库原理与设计',
        '掌握SQL基础语法与查询',
        '能使用ORM框架操作数据库'
      ],
      techs: [
        { name: '数据库基础概念', desc: '了解关系型数据库的核心概念，包括表、字段、主键、外键、索引等，理解ACID特性与事务处理，掌握数据库设计基本原则。' },
        { name: 'MySQL基础操作', desc: '学习MySQL的安装、配置、基本管理命令，掌握数据库与表的创建、修改、删除操作，理解数据类型选择与表结构设计方法。' },
        { name: 'SQL语句', desc: '系统学习SQL语句，包括SELECT查询、INSERT插入、UPDATE更新、DELETE删除等基本操作，掌握WHERE条件、JOIN连接、GROUP BY分组等高级查询技术。' },
        { name: 'ORM基础', desc: '理解对象关系映射(ORM)的概念与优势，学习SQLAlchemy的基本使用方法，掌握模型定义、查询构建、关系映射等技术，简化数据库操作。' },
        { name: '数据库连接与管理', desc: '学习Python连接数据库的方法，掌握连接池管理、游标操作，理解数据库迁移工具(如Alembic)的使用，保障数据库版本控制与安全管理。' }
      ],
      studyPeriod: '3-4周'
    },
    {
      title: '小型项目实践',
      skills: [
        '能独立开发命令行工具与简单Web应用',
        '掌握项目需求分析与设计方法',
        '具备数据处理与可视化基础能力'
      ],
      techs: [
        { name: '命令行工具开发', desc: '学习使用argparse/click等库构建命令行界面，设计用户友好的参数系统，实现实用的命令行工具，如文件处理器、数据转换工具等。' },
        { name: '简单Web项目', desc: '综合运用Flask、数据库、模板引擎等技术，开发完整的Web应用，如个人博客、待办事项管理器、简单CMS系统等，经历完整的项目开发周期。' },
        { name: '数据可视化基础', desc: '学习使用matplotlib、seaborn等库进行数据可视化，掌握常见图表（折线图、柱状图、散点图等）的绘制方法，在Web项目中集成可视化功能。' },
        { name: 'API集成与调用', desc: '学习调用第三方REST API的方法，使用requests库发送HTTP请求，处理JSON数据，实现与外部服务的集成，如天气查询、地图服务等。' },
        { name: '项目文档与测试', desc: '掌握基本的项目文档编写方法，学习使用Markdown格式记录开发过程，了解单元测试的概念与pytest基础用法，提高项目质量。' }
      ],
      studyPeriod: '4-5周'
    },
    {
      title: '基础算法与数据结构',
      skills: [
        '掌握Python中基本数据结构的实现',
        '理解并能实现常见排序与查找算法',
        '具备解决简单算法问题的能力'
      ],
      techs: [
        { name: '数组与列表操作', desc: '深入理解Python列表的内部实现与性能特性，掌握常见列表操作算法，如查找、排序、去重等，能分析时间复杂度与空间复杂度。' },
        { name: '栈与队列', desc: '学习栈(LIFO)与队列(FIFO)的概念与Python实现方法，理解它们在算法中的应用，如括号匹配、广度优先搜索等，能用适当数据结构解决问题。' },
        { name: '排序算法', desc: '掌握冒泡排序、选择排序、插入排序等基本排序算法的原理与Python实现，了解快速排序、归并排序等高级排序算法，比较不同算法的性能特点。' },
        { name: '查找算法', desc: '学习顺序查找、二分查找等基本查找算法，理解散列表(字典)的工作原理与应用场景，能根据数据特点选择合适的查找策略。' },
        { name: '递归算法', desc: '理解递归的基本思想与实现模式，掌握递归函数的编写方法与优化技巧，解决经典递归问题，如汉诺塔、斐波那契数列等。' }
      ],
      studyPeriod: '3周'
    },
    {
      title: '基础面试题梳理',
      skills: [
        '掌握Python基础知识点与面试技巧',
        '能清晰讲解个人项目与技术方案',
        '具备初级Python开发岗位面试能力'
      ],
      techs: [
        { name: 'Python基础面试题', desc: '系统梳理Python语法、数据类型、面向对象等核心概念的常见面试题，掌握GIL、深浅拷贝、装饰器等进阶概念的解释方法，提高技术表达准确性。' },
        { name: 'Web基础面试题', desc: '准备HTTP协议、Flask框架、RESTful API等Web开发相关面试题，理解MVC模式、路由系统、模板引擎等概念的面试问答，展示Web开发基础知识。' },
        { name: '数据库面试题', desc: '整理SQL语法、数据库设计、ORM使用等数据库相关面试题，准备索引优化、事务管理等进阶话题的回答，展示数据处理能力。' },
        { name: '项目讲解准备', desc: '学习如何清晰介绍项目背景、技术选型、架构设计、个人职责与贡献，准备项目难点与解决方案的表达，展示实践能力与解决问题的思路。' },
        { name: '算法编程题', desc: '练习常见Python编程题，如字符串处理、列表操作、简单算法实现等，培养现场编码能力与问题分析思路，为技术面试做准备。' }
      ],
      studyPeriod: '2-3周'
    },
  ],
  '大二-backend-python': [
    { title: '第一阶段：计算机与互联网基础', points: ['网络协议', 'Linux 基础', '常用命令'] },
    { title: '第二阶段：Python 基础与进阶', points: ['装饰器', '生成器', '文件操作'] },
    { title: '第三阶段：Web 框架进阶', points: ['Django 入门', '中间件', '用户认证'] },
    { title: '第四阶段：开发工具与环境', points: ['Docker 基础', '版本管理', '自动化测试'] },
    { title: '第五阶段：API 开发与测试', points: ['RESTful API', 'Postman', '接口文档'] },
    { title: '第六阶段：数据库进阶', points: ['MySQL 进阶', 'Redis', '数据库优化'] },
    { title: '第七阶段：中型项目实践', points: ['博客系统', '电商后端', '团队协作'] },
    { title: '第八阶段：算法与数据结构提升', points: ['树与图', '查找算法', '算法题实战'] },
    { title: '第九阶段：面试基础题梳理', points: ['Python 进阶题', 'Web 框架题', '项目优化'] },
  ],
  '大三-backend-python': [
    { title: '第一阶段：计算机与互联网基础', points: ['网络安全', '分布式基础', '云计算'] },
    { title: '第二阶段：Python 零基础入门', points: ['快速复习基础', '常见问题排查'] },
    { title: '第三阶段：Web 框架与微服务', points: ['Django 进阶', 'Flask 进阶', '微服务架构'] },
    { title: '第四阶段：开发工具与自动化', points: ['CI/CD', '自动化测试', '容器化部署'] },
    { title: '第五阶段：API 设计与安全', points: ['OAuth2', 'JWT', '接口安全'] },
    { title: '第六阶段：数据库与缓存优化', points: ['数据库分库分表', 'Redis 缓存', '性能调优'] },
    { title: '第七阶段：中大型项目实践', points: ['电商后端', '内容管理系统', '团队协作'] },
    { title: '第八阶段：算法与数据结构专项', points: ['动态规划', '复杂数据结构', '面试算法题'] },
    { title: '第九阶段：高频面试题精讲', points: ['手写代码题', '系统设计题', '项目优化讲解'] },
  ],
  '大四-backend-python': [
    { title: '第一阶段：计算机与互联网基础', points: ['云原生', '微服务架构', '行业趋势'] },
    { title: '第二阶段：Python 零基础入门', points: ['快速复盘基础', '查漏补缺'] },
    { title: '第三阶段：Web 框架与全栈基础', points: ['Django/Flask/Node', '全栈项目', 'API 网关'] },
    { title: '第四阶段：大型项目开发与部署', points: ['项目拆分', '自动化测试', '云部署'] },
    { title: '第五阶段：算法与数据结构专项', points: ['高级算法', '数据结构优化', '面试算法题'] },
    { title: '第六阶段：项目包装与简历优化', points: ['项目亮点提炼', '简历撰写', '作品集完善'] },
    { title: '第七阶段：模拟面试与就业指导', points: ['自我介绍', '高频面试题', '模拟面试'] },
    { title: '第八阶段：技术热点与前沿', points: ['AI 后端', '云原生', '新兴技术'] },
    { title: '第九阶段：职业规划与成长', points: ['行业分析', '岗位选择', '个人成长路径'] },
  ],
  // 后端-Java方向
  '大一-backend-java': [
    {
      title: '计算机与互联网基础',
      skills: [
        '理解计算机系统基本组成与工作原理',
        '掌握互联网的分层架构与通信机制',
        '了解操作系统基础知识',
        '认识信息安全与数据隐私的重要性',
        '具备基本的技术信息检索与学习能力'
      ],
      techs: [
        { name: '计算机组成原理', desc: '了解CPU、内存、存储设备等计算机硬件组成，理解操作系统、程序、数据的关系，掌握二进制与数据表示的基本概念，为后续学习打下基础。' },
        { name: '操作系统基础', desc: '理解操作系统的核心功能与架构，掌握进程、线程、内存管理等基本概念，了解Linux/Windows系统的基本操作与命令，为Java开发环境搭建做准备。' },
        { name: '互联网原理', desc: '理解互联网的分层架构与工作原理，包括TCP/IP协议栈、客户端/服务器模式、域名系统(DNS)、IP地址等概念，了解互联网应用的基本类型与技术发展趋势。' },
        { name: '网络协议入门', desc: '掌握HTTP/HTTPS协议的基本原理，了解请求/响应模型、常见状态码、请求方法等核心概念，认识API与微服务等现代架构模式。' },
        { name: '信息安全基础', desc: '了解常见的安全威胁与防护措施，认识数据加密、用户认证、授权机制的基本原理，培养基本的安全意识与实践。' }
      ],
      interviewTestId: 'freshman-backend-java-1',
      studyPeriod: '3周'
    },
    {
      title: 'Java语言基础',
      skills: [
        '掌握Java环境搭建与开发工具使用',
        '理解Java基本语法与数据类型',
        '熟练使用条件、循环等流程控制',
        '掌握数组与字符串的基本操作',
        '了解Java程序的编译与运行机制'
      ],
      techs: [
        { name: 'JDK环境搭建', desc: '学习安装JDK、配置环境变量、验证安装成功，掌握Java程序的编译(javac)与运行(java)命令，理解JVM、JRE、JDK的区别与关系。' },
        { name: 'IDE使用', desc: '熟悉IntelliJ IDEA或Eclipse等Java集成开发环境的基本功能与操作，掌握项目创建、代码编辑、编译运行、调试等基本技能，提高开发效率。' },
        { name: '基本语法', desc: '掌握Java标识符、关键字、注释、包声明、导入语句等基本语法元素，理解Java程序的基本结构与命名规范，养成良好的编码习惯。' },
        { name: '数据类型与变量', desc: '学习Java的基本数据类型(整型、浮点型、字符型、布尔型)与引用类型，理解变量声明、初始化、赋值的规则，掌握类型转换与运算符使用。' },
        { name: '流程控制', desc: '掌握if-else条件判断、switch多分支选择、for/while/do-while循环等流程控制语句，理解break/continue的作用，能实现基本的算法逻辑。' }
      ],
      interviewTestId: 'freshman-backend-java-2',
      studyPeriod: '4周'
    },
    {
      title: '面向对象编程基础',
      skills: [
        '理解面向对象编程核心概念',
        '掌握类与对象的定义与使用',
        '学会封装、继承、多态的应用',
        '理解接口与抽象类的设计思想',
        '掌握Java包管理与访问控制'
      ],
      techs: [
        { name: '类与对象', desc: '理解类作为对象的模板概念，掌握类的定义、对象的创建与使用，学习成员变量、成员方法、构造方法的声明与调用，建立面向对象的基本思维。' },
        { name: '封装与访问控制', desc: '掌握public、private、protected、默认访问修饰符的作用范围，理解封装的意义与实现方法，学习getter/setter方法的标准使用模式。' },
        { name: '继承与复用', desc: '理解继承的概念与语法(extends关键字)，掌握父类与子类的关系，学习方法重写(Override)与super关键字的使用，提高代码复用性。' },
        { name: '多态与接口', desc: '掌握Java多态的实现方式与应用场景，理解接口(interface)的定义与实现，学习抽象类与抽象方法的使用，增强程序的灵活性与扩展性。' },
        { name: '包与导入', desc: '学习Java包的创建与组织方法，理解包的命名规范与导入语句(import)的使用，掌握jar包的概念与基本使用，规范代码组织结构。' }
      ],
      interviewTestId: 'freshman-backend-java-3',
      studyPeriod: '4周'
    },
    {
      title: 'Java核心API',
      skills: [
        '掌握Java常用类库的使用',
        '熟练操作字符串与日期时间',
        '理解集合框架的设计与应用',
        '掌握异常处理机制',
        '了解Java I/O基础操作'
      ],
      techs: [
        { name: '常用工具类', desc: '掌握Java标准库中的Math、System、Objects等工具类的常用方法，理解包装类(Integer、Double等)与基本类型的自动装箱与拆箱机制。' },
        { name: '字符串处理', desc: '深入学习String、StringBuilder、StringBuffer类的特点与方法，掌握字符串的创建、连接、比较、查找、替换等操作，理解字符串不可变性的意义。' },
        { name: '集合框架', desc: '学习Java集合框架的核心接口与实现类，包括List(ArrayList、LinkedList)、Set(HashSet、TreeSet)、Map(HashMap、TreeMap)等，掌握集合的遍历、排序、查找等操作。' },
        { name: '异常处理', desc: '理解Java异常的分类(检查异常与非检查异常)与继承体系，掌握try-catch-finally语句块的使用，学习自定义异常与异常链，提高程序的健壮性。' },
        { name: '文件I/O基础', desc: '学习Java I/O流的基本概念与分类，掌握文件的读写操作，了解字节流与字符流的区别，初步接触NIO的概念，能实现基本的文件处理功能。' }
      ],
      interviewTestId: 'freshman-backend-java-4',
      studyPeriod: '4周'
    },
    {
      title: 'Java进阶特性',
      skills: [
        '理解泛型的概念与使用方法',
        '掌握反射机制的基本应用',
        '学习注解的定义与处理',
        '了解Java 8+新特性',
        '掌握多线程编程基础'
      ],
      techs: [
        { name: '泛型编程', desc: '理解Java泛型的概念与意义，掌握泛型类、泛型方法、泛型接口的定义与使用，学习类型擦除、通配符、类型边界等高级特性，提高代码的类型安全性与复用性。' },
        { name: '反射机制', desc: '学习Java反射API的基本用法，包括获取Class对象、检查类信息、动态创建对象、调用方法等，理解反射在框架开发中的应用，为学习Spring等框架做准备。' },
        { name: '注解基础', desc: '了解Java注解的概念与内置注解(@Override、@Deprecated等)，学习自定义注解的创建与使用方法，初步接触注解处理器，理解注解在现代Java开发中的重要性。' },
        { name: 'Lambda表达式', desc: '掌握Java 8引入的Lambda表达式语法与函数式接口概念，学习方法引用、默认方法等特性，理解函数式编程思想，简化代码实现。' },
        { name: '多线程基础', desc: '理解Java多线程的基本概念，学习Thread类与Runnable接口的使用，掌握线程的创建、启动、控制方法，了解线程安全与同步的基本问题，为并发编程打下基础。' }
      ],
      interviewTestId: 'freshman-backend-java-5',
      studyPeriod: '4周'
    },
    {
      title: '开发工具与环境',
      skills: [
        '掌握Git版本控制基础操作',
        '学会使用Maven管理项目依赖',
        '熟悉IDE高级功能与调试技巧',
        '了解单元测试基础',
        '掌握Java项目构建与打包'
      ],
      techs: [
        { name: 'Git版本控制', desc: '掌握Git的基本概念(仓库、提交、分支)与常用命令(init、add、commit、push、pull、clone等)，学习分支管理与合并冲突解决，能使用GitHub/GitLab进行协作开发与代码管理。' },
        { name: 'Maven基础', desc: '理解Maven的核心概念与POM文件结构，学习依赖管理、生命周期、插件配置等基础知识，掌握Maven项目的创建、构建、打包过程，规范项目依赖管理。' },
        { name: 'IDE高级功能', desc: '深入学习IntelliJ IDEA的高级功能，包括代码补全、重构工具、版本控制集成、调试技巧等，提高开发效率与代码质量。' },
        { name: '单元测试入门', desc: '了解JUnit框架的基本概念与用法，学习编写简单的单元测试，掌握断言、测试套件等概念，培养测试驱动开发的意识，提高代码可靠性。' },
        { name: '项目构建与部署', desc: '学习Java项目的构建流程与打包方式，了解JAR、WAR文件的概念与区别，掌握简单应用的部署方法，为后续学习DevOps打下基础。' }
      ],
      interviewTestId: 'freshman-backend-java-6',
      studyPeriod: '3周'
    },
    {
      title: '数据库基础',
      skills: [
        '理解关系型数据库基本概念',
        '掌握SQL语句的编写与执行',
        '学习JDBC连接数据库',
        '了解数据库设计基础',
        '初步接触ORM框架'
      ],
      techs: [
        { name: '数据库概念', desc: '理解关系型数据库的核心概念，包括表、行、列、主键、外键、索引等，了解MySQL等常用数据库系统的特点与应用场景。' },
        { name: 'SQL基础', desc: '掌握SQL语言的基本语法，包括SELECT查询、INSERT插入、UPDATE更新、DELETE删除等DML操作，以及CREATE、ALTER、DROP等DDL操作，能编写基本的数据库操作语句。' },
        { name: 'JDBC编程', desc: '学习JDBC API的核心组件与使用流程，掌握数据库连接、语句执行、结果集处理等基本操作，理解预编译语句与事务管理的概念，实现Java应用与数据库的交互。' },
        { name: '数据库设计基础', desc: '了解数据库设计的基本原则与范式理论，学习ER图的绘制方法，掌握表关系(一对一、一对多、多对多)的实现方式，能设计简单的数据库结构。' },
        { name: 'ORM框架入门', desc: '初步接触MyBatis等ORM框架的概念与基本用法，理解对象关系映射的核心思想，了解XML配置与注解两种方式，为后续深入学习持久层框架做准备。' }
      ],
      interviewTestId: 'freshman-backend-java-7',
      studyPeriod: '4周'
    },
    {
      title: '简单项目实践',
      skills: [
        '整合所学知识完成小型项目',
        '体验完整的开发流程',
        '培养问题解决与团队协作能力',
        '积累项目经验与技术文档编写能力',
        '为面试准备项目案例'
      ],
      techs: [
        { name: '控制台应用开发', desc: '设计并实现简单的Java控制台应用，如学生管理系统、图书管理系统等，整合面向对象设计、集合框架、文件I/O等知识点，体验完整的程序开发流程。' },
        { name: '简单GUI应用', desc: '学习Swing或JavaFX基础，开发带有图形界面的小应用，如计算器、待办事项管理器等，理解事件驱动编程模型，提升用户交互体验。' },
        { name: '数据库应用', desc: '开发与数据库交互的应用程序，实现数据的增删改查操作，应用JDBC或简单ORM框架，体验数据持久化的实现过程，解决实际业务问题。' },
        { name: '项目文档编写', desc: '学习技术文档的编写方法与工具，为项目创建需求文档、设计文档、用户手册等，培养专业的文档能力，为团队协作与项目维护做准备。' },
        { name: '代码审查与重构', desc: '学习代码审查的基本方法与标准，对自己或他人的代码进行评审，识别并修复常见问题，实践简单的代码重构技术，提高代码质量。' }
      ],
      interviewTestId: 'freshman-backend-java-8',
      studyPeriod: '5周'
    },
    {
      title: '面试准备与职业规划',
      skills: [
        '掌握Java基础知识点梳理与答题技巧',
        '准备个人项目与代码展示',
        '学习自我介绍与技术沟通',
        '了解Java开发岗位需求与职业路径',
        '制定个性化学习计划与目标'
      ],
      techs: [
        { name: 'Java基础面试题', desc: '系统梳理Java语法、面向对象、集合框架、异常处理等核心概念与常见面试题，形成知识体系，掌握清晰简洁的回答技巧。' },
        { name: '项目准备', desc: '学习如何包装与展示个人项目，提炼技术要点与解决方案，准备项目Demo与代码仓库，展示个人的动手能力与技术理解。' },
        { name: '自我介绍准备', desc: '掌握技术面试中自我介绍的结构与要点，学会简洁清晰地表达个人技术栈、学习经历与项目经验，给面试官留下专业印象。' },
        { name: '模拟面试实战', desc: '通过角色扮演模拟技术面试场景，练习常见问题的回答与现场编码，获取反馈并改进，增强面试信心与应对能力。' },
        { name: '职业规划', desc: '了解Java开发的职业发展路径与技术方向，认识初级、中级、高级Java工程师的能力要求差异，制定个人的职业目标与学习计划。' }
      ],
      interviewTestId: 'freshman-backend-java-9',
      studyPeriod: '2-3周'
    }
  ],
  '大二-backend-java': [
    { title: '第一阶段：计算机与互联网基础', points: ['网络协议', 'Linux 基础', '常用命令'] },
    { title: '第二阶段：Java 基础与进阶', points: ['集合框架', '异常处理', '泛型'] },
    { title: '第三阶段：主流框架入门', points: ['Spring', 'SpringMVC', 'MyBatis'] },
    { title: '第四阶段：开发工具与环境', points: ['Docker 基础', '版本管理', '自动化测试'] },
    { title: '第五阶段：Web 项目开发', points: ['RESTful API', '前后端分离', '接口联调'] },
    { title: '第六阶段：数据库进阶', points: ['MySQL 进阶', 'Redis', '数据库优化'] },
    { title: '第七阶段：中型项目实践', points: ['电商后端', '博客系统', '团队协作'] },
    { title: '第八阶段：算法与数据结构提升', points: ['树与图', '查找算法', '算法题实战'] },
    { title: '第九阶段：面试基础题梳理', points: ['Java 进阶题', '框架基础题', '项目优化'] },
  ],
  '大三-backend-java': [
    { title: '第一阶段：计算机与互联网基础', points: ['网络安全', '分布式基础', '云计算'] },
    { title: '第二阶段：Java 零基础入门', points: ['快速复习基础', '常见问题排查'] },
    { title: '第三阶段：主流框架进阶', points: ['Spring Boot', 'Spring Cloud', '微服务架构'] },
    { title: '第四阶段：开发工具与自动化', points: ['CI/CD', '自动化测试', '容器化部署'] },
    { title: '第五阶段：Web 项目开发与协作', points: ['多人协作', 'Git 分支管理', '接口联调'] },
    { title: '第六阶段：数据库与缓存优化', points: ['数据库分库分表', 'Redis 缓存', '性能调优'] },
    { title: '第七阶段：中大型项目实践', points: ['电商后端', '内容管理系统', '团队协作'] },
    { title: '第八阶段：算法与数据结构专项', points: ['动态规划', '复杂数据结构', '面试算法题'] },
    { title: '第九阶段：高频面试题精讲', points: ['手写代码题', '系统设计题', '项目优化讲解'] },
  ],
  '大四-backend-java': [
    { title: '第一阶段：计算机与互联网基础', points: ['云原生', '微服务架构', '行业趋势'] },
    { title: '第二阶段：Java 零基础入门', points: ['快速复盘基础', '查漏补缺'] },
    { title: '第三阶段：主流框架与全栈基础', points: ['Spring Boot/Cloud', '全栈项目', 'API 网关'] },
    { title: '第四阶段：大型项目开发与部署', points: ['项目拆分', '自动化测试', '云部署'] },
    { title: '第五阶段：算法与数据结构专项', points: ['高级算法', '数据结构优化', '面试算法题'] },
    { title: '第六阶段：项目包装与简历优化', points: ['项目亮点提炼', '简历撰写', '作品集完善'] },
    { title: '第七阶段：模拟面试与就业指导', points: ['自我介绍', '高频面试题', '模拟面试'] },
    { title: '第八阶段：技术热点与前沿', points: ['AI 后端', '云原生', '新兴技术'] },
    { title: '第九阶段：职业规划与成长', points: ['行业分析', '岗位选择', '个人成长路径'] },
  ],
  // AI能力提升方向
  '大一-ai': [
    {
      title: '计算机与数学基础',
      skills: [
        '理解计算机系统基本组成与工作原理',
        '掌握AI领域必备的数学基础',
        '了解AI发展历史与应用领域',
        '认识数据隐私与AI伦理问题',
        '具备基本的技术信息检索与学习能力'
      ],
      techs: [
        { name: '计算机组成原理', desc: '了解CPU、内存、存储设备等计算机硬件组成，理解操作系统、程序、数据的关系，掌握二进制与数据表示的基本概念，为后续学习打下基础。' },
        { name: '线性代数基础', desc: '掌握向量、矩阵的基本运算与性质，理解特征值、特征向量的概念，学习矩阵分解方法，为深度学习中的数学模型打下基础。' },
        { name: '概率与统计', desc: '学习概率论基础，包括随机变量、概率分布、期望、方差等概念，掌握基本的统计方法，如假设检验、区间估计，为机器学习中的统计模型做准备。' },
        { name: '微积分入门', desc: '理解导数、偏导数、梯度的概念，掌握基本的优化方法，为深度学习中的反向传播算法与优化器打下基础。' },
        { name: 'AI发展概述', desc: '了解人工智能的发展历史、主要分支（机器学习、深度学习、自然语言处理等）及典型应用场景，建立对AI领域的整体认识。' }
      ],
      interviewTestId: 'freshman-ai-1',
      studyPeriod: '4周'
    },
    {
      title: 'Python编程基础',
      skills: [
        '掌握Python基本语法与数据类型',
        '熟练使用条件、循环等流程控制',
        '理解函数定义与调用机制',
        '掌握列表、字典等数据结构',
        '了解Python在AI领域的应用'
      ],
      techs: [
        { name: 'Python环境搭建', desc: '学习安装Python解释器、配置开发环境、使用pip包管理工具，掌握Jupyter Notebook的基本用法，为数据分析与机器学习实践做准备。' },
        { name: '基本语法', desc: '掌握Python的变量、数据类型、运算符、表达式等基础语法，理解Python的缩进规则与代码块结构，养成规范的编码习惯。' },
        { name: '流程控制', desc: '学习if-elif-else条件判断、for循环、while循环的语法与使用场景，掌握列表推导式等Python特有的简洁语法，提高编码效率。' },
        { name: '函数与模块', desc: '掌握函数的定义、调用、参数传递、返回值等基本概念，学习模块的导入与使用方法，理解命名空间与作用域，实现代码的模块化组织。' },
        { name: '数据结构', desc: '深入学习Python的核心数据结构，包括列表、元组、字典、集合等，掌握它们的特性与操作方法，为数据处理打下基础。' }
      ],
      interviewTestId: 'freshman-ai-2',
      studyPeriod: '4周'
    },
    {
      title: '数据分析基础',
      skills: [
        '掌握NumPy数组操作与科学计算',
        '熟练使用Pandas进行数据处理',
        '学会基本的数据可视化技术',
        '理解数据清洗与预处理流程',
        '能进行简单的探索性数据分析'
      ],
      techs: [
        { name: 'NumPy基础', desc: '学习NumPy库的核心功能，掌握ndarray对象的创建与操作，理解广播机制，熟练使用NumPy进行向量化计算，提高数值计算效率。' },
        { name: 'Pandas数据处理', desc: '掌握Pandas的Series与DataFrame数据结构，学习数据读写、选择、过滤、分组、聚合等操作，能处理各种格式的结构化数据。' },
        { name: 'Matplotlib可视化', desc: '学习使用Matplotlib绘制各类图表，包括折线图、柱状图、散点图、直方图等，掌握图表定制与美化方法，提升数据可视化能力。' },
        { name: '数据清洗技术', desc: '掌握处理缺失值、异常值、重复数据的方法，学习数据转换、标准化、归一化等预处理技术，提高数据质量，为后续建模做准备。' },
        { name: '探索性数据分析', desc: '学习数据探索的基本方法，包括描述统计、相关性分析、分布检验等，培养数据洞察能力，从数据中提取有价值的信息。' }
      ],
      interviewTestId: 'freshman-ai-3',
      studyPeriod: '4周'
    },
    {
      title: '机器学习入门',
      skills: [
        '理解机器学习的基本概念与流程',
        '掌握监督学习的核心算法',
        '学习无监督学习的基本方法',
        '了解模型评估与选择技术',
        '能使用scikit-learn实现简单模型'
      ],
      techs: [
        { name: '机器学习概述', desc: '了解机器学习的定义、分类（监督学习、无监督学习、强化学习）与基本流程，理解训练集、验证集、测试集的划分原则，掌握机器学习项目的基本步骤。' },
        { name: '线性模型', desc: '学习线性回归、逻辑回归等基础模型的原理与实现，理解损失函数、优化算法的概念，掌握模型参数的解释与调优方法。' },
        { name: '决策树与集成学习', desc: '掌握决策树的构建原理与算法，学习随机森林、梯度提升树等集成学习方法，理解模型集成的优势与实现技术。' },
        { name: '聚类与降维', desc: '学习K-means、层次聚类等无监督学习算法，了解PCA、t-SNE等降维技术，掌握数据聚类与可视化的基本方法。' },
        { name: 'scikit-learn实践', desc: '熟悉scikit-learn库的API设计与使用方法，学习数据预处理、模型训练、评估、调参的标准流程，实现端到端的机器学习项目。' }
      ],
      interviewTestId: 'freshman-ai-4',
      studyPeriod: '5周'
    },
    {
      title: '深度学习基础',
      skills: [
        '理解神经网络的基本原理与结构',
        '掌握深度学习的核心概念',
        '学习使用PyTorch或TensorFlow框架',
        '了解卷积神经网络的基础知识',
        '能实现简单的深度学习模型'
      ],
      techs: [
        { name: '神经网络基础', desc: '学习人工神经元、激活函数、前向传播、反向传播等基本概念，理解多层感知机的结构与工作原理，掌握神经网络的数学表示与计算过程。' },
        { name: '深度学习框架入门', desc: '选择PyTorch或TensorFlow等主流框架，学习张量操作、计算图、自动求导等核心功能，掌握模型定义、训练、评估的基本流程。' },
        { name: '卷积神经网络初步', desc: '了解CNN的基本组件（卷积层、池化层、全连接层）与设计原理，学习经典CNN架构（LeNet、AlexNet等），理解CNN在图像处理中的应用。' },
        { name: '损失函数与优化器', desc: '学习常用损失函数（交叉熵、MSE等）的选择与应用，掌握梯度下降、Adam等优化算法的原理与使用方法，理解学习率、批量大小等超参数的影响。' },
        { name: '模型训练技巧', desc: '了解过拟合、欠拟合的概念与解决方法，学习正则化、Dropout等技术，掌握模型训练过程中的监控与调试方法，提高模型性能。' }
      ],
      interviewTestId: 'freshman-ai-5',
      studyPeriod: '5周'
    },
    {
      title: 'AI应用场景与实践',
      skills: [
        '了解AI在各领域的应用案例',
        '掌握图像识别的基本技术',
        '学习自然语言处理的入门知识',
        '体验推荐系统的基本原理',
        '能实现简单的AI应用项目'
      ],
      techs: [
        { name: '计算机视觉入门', desc: '学习图像处理基础，了解图像分类、目标检测、图像分割等任务，使用预训练模型实现简单的图像识别应用，体验CV技术的实际应用。' },
        { name: '自然语言处理基础', desc: '了解文本预处理、词向量、语言模型等NLP基础概念，学习使用NLTK、spaCy等库进行文本分析，实现简单的文本分类或情感分析任务。' },
        { name: '推荐系统原理', desc: '学习协同过滤、内容推荐等基本算法，了解推荐系统的评估指标与常见问题，实现简单的推荐功能，理解个性化推荐的价值与挑战。' },
        { name: '时间序列分析', desc: '了解时间序列数据的特性与处理方法，学习基本的预测模型，如ARIMA、指数平滑等，实践简单的时间序列预测任务，如销售预测、股价分析等。' },
        { name: 'AI应用部署', desc: '学习模型部署的基本流程与工具，了解Flask/FastAPI等Web框架，实现简单的AI应用API或Web界面，体验AI从研发到应用的完整过程。' }
      ],
      interviewTestId: 'freshman-ai-6',
      studyPeriod: '4周'
    },
    {
      title: '开发工具与环境',
      skills: [
        '掌握Git版本控制基础操作',
        '熟悉AI开发环境配置与管理',
        '学会使用Jupyter等交互式工具',
        '了解云平台与GPU加速技术',
        '掌握项目文档与报告编写'
      ],
      techs: [
        { name: 'Git版本控制', desc: '掌握Git的基本概念(仓库、提交、分支)与常用命令(init、add、commit、push、pull、clone等)，学习分支管理与合并冲突解决，能使用GitHub/GitLab进行协作开发与代码管理。' },
        { name: 'AI开发环境', desc: '学习Anaconda环境管理，掌握虚拟环境创建、包管理、环境共享等技术，理解依赖管理的重要性，确保AI项目的可复现性。' },
        { name: 'Jupyter工具链', desc: '深入学习Jupyter Notebook/Lab的高级功能，包括魔法命令、插件扩展、远程连接等，掌握交互式开发、结果可视化、报告生成的技巧，提高数据分析效率。' },
        { name: '云平台与GPU', desc: '了解Google Colab、Kaggle Kernels等云平台的使用方法，学习GPU加速的基本配置与优化技巧，解决本地计算资源不足的问题，加速深度学习模型训练。' },
        { name: '技术文档与报告', desc: '学习Markdown、LaTeX等文档编写工具，掌握数据分析报告、技术文档的结构与写作方法，能清晰展示分析过程、结果与结论，提升专业沟通能力。' }
      ],
      interviewTestId: 'freshman-ai-7',
      studyPeriod: '3周'
    },
    {
      title: '小型项目实践',
      skills: [
        '整合所学知识完成AI小项目',
        '体验完整的数据科学流程',
        '培养问题解决与团队协作能力',
        '积累项目经验与作品集',
        '为面试准备项目案例'
      ],
      techs: [
        { name: '图像分类项目', desc: '使用CNN实现图像分类任务，如手写数字识别、简单物体分类等，经历数据收集、预处理、模型设计、训练评估的完整流程，体验深度学习项目的开发过程。' },
        { name: '文本分析项目', desc: '开发文本分类或情感分析应用，如新闻分类、评论情感分析等，应用NLP基础技术，解决实际问题，理解文本数据处理的特点与挑战。' },
        { name: '预测分析项目', desc: '实现数据预测类项目，如房价预测、销售预测等，综合应用机器学习算法，从数据分析到模型部署，体验端到端的预测系统开发。' },
        { name: '数据可视化项目', desc: '创建交互式数据可视化应用，使用Plotly、Dash等工具，展示数据洞察与分析结果，提升数据故事讲述能力，增强项目的展示效果。' },
        { name: '项目文档与展示', desc: '学习项目文档编写、代码注释规范、GitHub项目组织方法，创建专业的项目README与演示文稿，为求职面试准备高质量的作品集。' }
      ],
      interviewTestId: 'freshman-ai-8',
      studyPeriod: '5周'
    },
    {
      title: '面试准备与职业规划',
      skills: [
        '掌握AI基础知识点梳理与答题技巧',
        '准备数据科学项目与代码展示',
        '学习自我介绍与技术沟通',
        '了解AI相关岗位需求与职业路径',
        '制定个性化学习计划与目标'
      ],
      techs: [
        { name: 'AI基础面试题', desc: '系统梳理机器学习、深度学习、数据分析等核心概念与常见面试题，形成知识体系，掌握清晰简洁的回答技巧，准备技术面试。' },
        { name: '项目准备', desc: '学习如何包装与展示个人AI项目，提炼技术要点与解决方案，准备项目Demo与代码仓库，展示数据分析思维与技术实现能力。' },
        { name: '自我介绍准备', desc: '掌握技术面试中自我介绍的结构与要点，学会简洁清晰地表达个人技术栈、学习经历与项目经验，突出AI相关技能与经验。' },
        { name: '模拟面试实战', desc: '通过角色扮演模拟技术面试场景，练习常见问题的回答与现场编码，获取反馈并改进，增强面试信心与应对能力。' },
        { name: '职业规划', desc: '了解数据分析师、机器学习工程师、AI研究员等职位的能力要求与发展路径，认识行业趋势与技术热点，制定个人的职业目标与学习计划。' }
      ],
      interviewTestId: 'freshman-ai-9',
      studyPeriod: '2-3周'
    }
  ],
  // 产品经理方向
  '大一-pm': [
    {
      title: '产品思维与基础',
      skills: [
        '理解产品经理的角色与职责',
        '掌握产品思维与用户思维',
        '了解产品开发流程与生命周期',
        '认识互联网产品的分类与特点',
        '具备基本的产品分析能力'
      ],
      techs: [
        { name: '产品经理角色定位', desc: '了解产品经理在团队中的角色定位、核心职责与工作内容，理解与设计师、开发工程师、运营等角色的协作关系，建立对产品经理岗位的全面认识。' },
        { name: '产品思维培养', desc: '学习产品思维的核心要素，包括用户价值、商业价值、可行性的平衡，掌握以问题为导向的思考方式，培养结构化分析能力与批判性思维。' },
        { name: '用户思维基础', desc: '理解以用户为中心的设计理念，学习用户需求层次理论，掌握同理心工具，培养站在用户角度思考问题的能力，为后续用户研究打下基础。' },
        { name: '产品生命周期', desc: '了解产品从创意到衰退的完整生命周期，掌握不同阶段的工作重点与策略差异，认识产品迭代与版本管理的基本概念与方法。' },
        { name: '互联网产品分类', desc: '学习互联网产品的主要类型（如工具型、社交型、内容型、电商型等）及其特点，了解不同类型产品的商业模式与成功要素，拓宽产品视野。' }
      ],
      interviewTestId: 'freshman-pm-1',
      studyPeriod: '3周'
    },
    {
      title: '用户研究基础',
      skills: [
        '掌握用户研究的基本方法',
        '学会用户画像的创建与应用',
        '理解用户需求挖掘技巧',
        '掌握用户访谈与调研技术',
        '了解用户行为数据分析基础'
      ],
      techs: [
        { name: '用户研究方法论', desc: '学习定性与定量研究方法的区别与应用场景，掌握问卷调查、用户访谈、焦点小组、可用性测试等基本研究方法，理解如何根据研究目的选择合适的方法。' },
        { name: '用户画像', desc: '掌握用户画像的创建方法与要素，学习人口统计学特征、行为特征、心理特征、需求特征等维度的分析，理解用户画像在产品设计中的应用，提升用户理解能力。' },
        { name: '需求挖掘', desc: '学习用户需求层次理论（功能需求、体验需求、情感需求），掌握从用户痛点、场景、问题出发挖掘真实需求的技巧，理解显性需求与隐性需求的区别。' },
        { name: '用户访谈技巧', desc: '掌握用户访谈的准备、执行与分析全流程，学习访谈提纲设计、问题设置技巧、访谈引导方法，提升从用户交流中获取有效信息的能力。' },
        { name: '用户行为数据', desc: '了解用户行为数据的基本指标与分析方法，学习用户路径分析、留存分析、转化漏斗等基础概念，初步接触数据驱动的产品决策思路。' }
      ],
      interviewTestId: 'freshman-pm-2',
      studyPeriod: '4周'
    },
    {
      title: '产品设计基础',
      skills: [
        '掌握产品需求文档(PRD)的编写',
        '学会用例图与流程图的绘制',
        '理解产品原型设计基础',
        '了解基本的交互设计原则',
        '掌握产品功能设计方法'
      ],
      techs: [
        { name: 'PRD文档编写', desc: '学习产品需求文档的结构与内容，掌握需求描述、功能说明、交互流程、界面原型等核心部分的编写方法，理解PRD在产品开发中的作用与使用场景。' },
        { name: '用例与流程设计', desc: '掌握用例图、流程图、泳道图等工具的使用方法，学习业务流程与用户操作流程的梳理与优化技巧，提升逻辑思维能力与流程设计能力。' },
        { name: '产品原型设计', desc: '学习低保真原型与高保真原型的区别与应用场景，掌握Axure、墨刀等原型工具的基本使用方法，能够将产品构思转化为可视化的原型。' },
        { name: '交互设计原则', desc: '了解易用性、一致性、反馈、容错性等基本交互设计原则，学习导航设计、表单设计、信息架构等常见交互模式，提升用户体验设计意识。' },
        { name: '功能设计方法', desc: '掌握功能分解、功能地图等工具的使用方法，学习MVP(最小可行产品)的概念与实践，理解功能优先级排序的原则与方法，培养产品规划能力。' }
      ],
      interviewTestId: 'freshman-pm-3',
      studyPeriod: '5周'
    },
    {
      title: '产品运营基础',
      skills: [
        '理解产品运营的核心工作',
        '掌握用户增长的基本策略',
        '学习内容运营与活动策划',
        '了解数据分析与用户反馈收集',
        '认识产品与运营的协作关系'
      ],
      techs: [
        { name: '产品运营概述', desc: '了解产品运营的定义、工作内容与目标，理解用户运营、内容运营、活动运营、数据运营等不同方向的特点，认识产品经理与运营的协作模式。' },
        { name: '用户增长策略', desc: '学习AARRR模型（获取、激活、留存、推荐、收入）等用户增长框架，了解不同阶段的关键指标与提升策略，掌握基本的用户运营思路。' },
        { name: '内容与活动策划', desc: '掌握内容策划的基本方法与评估标准，学习活动设计的目标设定、形式选择、执行计划等环节，理解内容与活动对产品推广的作用。' },
        { name: '用户反馈管理', desc: '学习用户反馈的收集渠道与分析方法，掌握用户问题分类、优先级排序、解决方案制定的流程，理解基于用户反馈持续优化产品的机制。' },
        { name: '运营数据分析', desc: '了解运营数据的核心指标体系，学习日活、月活、留存率、转化率等关键指标的含义与计算方法，初步掌握数据分析工具的使用，培养数据驱动思维。' }
      ],
      interviewTestId: 'freshman-pm-4',
      studyPeriod: '3周'
    },
    {
      title: '互联网技术基础',
      skills: [
        '了解互联网产品技术架构',
        '掌握前端、后端、移动端基本概念',
        '学习产品技术评估与沟通',
        '理解常见技术限制与可能性',
        '具备与技术团队协作的能力'
      ],
      techs: [
        { name: '互联网技术架构', desc: '了解前端、后端、数据库、服务器等技术组件的基本概念与作用，理解B/S架构、移动应用架构的特点，建立对产品技术实现的整体认识。' },
        { name: '前端技术基础', desc: '了解HTML、CSS、JavaScript等前端技术的基本概念与作用，认识常见的前端框架与组件库，理解响应式设计、前端性能优化等关键概念。' },
        { name: '后端与数据库', desc: '了解常见的后端语言（如Java、Python、PHP等）与框架，认识关系型数据库与NoSQL数据库的区别，掌握API、微服务等概念，理解后端架构对产品的影响。' },
        { name: '移动端技术', desc: '了解iOS、Android原生开发与跨平台开发的区别，认识移动应用的特殊性能与体验要求，掌握与移动开发团队沟通的专业术语与知识。' },
        { name: '技术沟通能力', desc: '学习与技术团队有效沟通的方法与技巧，掌握需求转化为技术任务的过程，理解技术评估与排期的基本原则，提升跨部门协作能力。' }
      ],
      interviewTestId: 'freshman-pm-5',
      studyPeriod: '4周'
    },
    {
      title: '数据分析入门',
      skills: [
        '掌握产品数据指标体系构建',
        '学习基本的数据分析方法',
        '了解数据可视化与报告制作',
        '理解A/B测试的设计与执行',
        '具备数据驱动决策的能力'
      ],
      techs: [
        { name: '产品指标体系', desc: '学习构建产品指标体系的方法，掌握核心指标、过程指标、质量指标的设计原则，理解不同类型产品的关键指标差异，建立数据监控框架。' },
        { name: '数据分析基础', desc: '掌握描述性统计、对比分析、趋势分析等基本分析方法，学习使用Excel、SQL等工具进行数据处理，培养数据分析的逻辑思维与实操能力。' },
        { name: '数据可视化', desc: '学习数据图表的选择原则与设计方法，掌握柱状图、折线图、饼图等常用图表的适用场景，了解Tableau、PowerBI等可视化工具的基本使用。' },
        { name: 'A/B测试', desc: '理解A/B测试的原理与应用场景，学习实验设计、样本量计算、结果分析的基本方法，掌握基于实验数据优化产品决策的流程。' },
        { name: '数据报告制作', desc: '学习数据分析报告的结构与内容组织，掌握数据解读、洞察提炼、行动建议的表达方式，提升数据沟通与演示能力，支持团队决策。' }
      ],
      interviewTestId: 'freshman-pm-6',
      studyPeriod: '4周'
    },
    {
      title: '产品策略与商业思维',
      skills: [
        '理解产品定位与价值主张',
        '掌握市场分析与竞品分析',
        '学习商业模式设计基础',
        '了解产品策略与规划方法',
        '培养商业敏感度与战略思维'
      ],
      techs: [
        { name: '产品定位', desc: '学习产品定位的方法与工具，如定位图、价值主张画布等，掌握目标用户、核心价值、差异化优势的提炼技巧，理解定位对产品设计的指导作用。' },
        { name: '竞品分析', desc: '掌握竞品分析的框架与维度，学习功能对比、用户体验评估、商业模式分析等方法，培养市场洞察能力，从竞品中获取灵感与经验教训。' },
        { name: '商业模式基础', desc: '了解商业模式画布的九大要素，学习收入模式、成本结构、渠道策略等商业要素的分析方法，理解产品与商业目标的一致性，培养商业思维。' },
        { name: '市场分析', desc: '学习PEST分析、波特五力模型等市场分析工具，了解市场规模估算、用户细分、市场渗透等概念，提升对市场环境与趋势的判断能力。' },
        { name: '产品策略规划', desc: '掌握产品路线图、优先级矩阵等产品规划工具，学习基于目标与资源制定产品策略的方法，理解短期目标与长期愿景的平衡，培养战略思维。' }
      ],
      interviewTestId: 'freshman-pm-7',
      studyPeriod: '4周'
    },
    {
      title: '产品项目实践',
      skills: [
        '整合所学知识完成产品方案',
        '体验完整的产品设计流程',
        '培养问题解决与团队协作能力',
        '积累项目经验与作品集',
        '为面试准备产品案例'
      ],
      techs: [
        { name: '产品方案设计', desc: '选择特定场景或问题，完成从用户研究、需求分析到功能设计、原型制作的完整产品方案，体验产品设计的全流程，培养综合运用所学知识的能力。' },
        { name: '竞品分析项目', desc: '选择特定领域的产品进行深入的竞品分析，包括功能对比、用户体验评估、商业模式分析、改进建议等，锻炼市场分析能力与批判性思维。' },
        { name: '用户研究实践', desc: '设计并执行小型用户研究项目，包括研究计划制定、调研执行、数据分析、洞察提炼等环节，体验真实的用户研究流程，提升研究方法应用能力。' },
        { name: '产品改进提案', desc: '针对现有产品的问题或机会点，提出详细的改进方案，包括问题分析、解决方案、原型设计、预期效果等，锻炼产品优化思维与方案表达能力。' },
        { name: '作品集整理', desc: '学习产品经理作品集的构建方法，整理项目经历与成果，提炼个人产品思维与能力亮点，为求职面试准备专业的产品作品集。' }
      ],
      interviewTestId: 'freshman-pm-8',
      studyPeriod: '5周'
    },
    {
      title: '面试准备与职业规划',
      skills: [
        '掌握产品经理面试技巧与答题框架',
        '准备产品案例与作品展示',
        '学习自我介绍与产品思维表达',
        '了解产品经理岗位需求与职业路径',
        '制定个性化学习计划与目标'
      ],
      techs: [
        { name: '产品面试题库', desc: '系统梳理产品经理常见面试题型与答题思路，包括产品分析、功能设计、用户场景、商业思考等维度，形成结构化的知识框架，掌握清晰简洁的回答技巧。' },
        { name: '案例准备', desc: '学习如何包装与展示个人产品项目，提炼思考过程、解决方案与成果，准备产品分析案例与设计方案，展示个人的产品思维与实践能力。' },
        { name: '自我介绍准备', desc: '掌握产品经理面试中自我介绍的结构与要点，学会简洁清晰地表达个人背景、能力优势与职业目标，给面试官留下专业印象。' },
        { name: '模拟面试实战', desc: '通过角色扮演模拟产品面试场景，练习常见问题的回答与产品分析，获取反馈并改进，增强面试信心与应对能力。' },
        { name: '职业规划', desc: '了解产品经理的职业发展路径与方向（如C端/B端产品、行业细分、管理路线等），认识初级、中级、高级产品经理的能力要求差异，制定个人的职业目标与学习计划。' }
      ],
      interviewTestId: 'freshman-pm-9',
      studyPeriod: '3周'
    }
  ],
  // 算法与竞赛方向
  '大一-algo': [
    {
      title: '计算机科学基础',
      skills: [
        '理解计算机系统基本组成与工作原理',
        '掌握算法与数据结构的基本概念',
        '了解程序设计的核心思想',
        '认识计算复杂性与算法效率',
        '具备基本的逻辑思维与问题抽象能力'
      ],
      techs: [
        { name: '计算机组成原理', desc: '了解CPU、内存、存储设备等计算机硬件组成，理解操作系统、程序、数据的关系，掌握二进制与数据表示的基本概念，为算法学习打下基础。' },
        { name: '算法基本概念', desc: '理解算法的定义与特性，掌握算法分析的基本方法，学习时间复杂度与空间复杂度的计算，建立算法效率评估的基本框架。' },
        { name: '数据结构概述', desc: '了解常见数据结构的分类与特点，理解数据结构与算法的关系，认识抽象数据类型的概念，为系统学习数据结构做准备。' },
        { name: '程序设计思想', desc: '学习结构化程序设计、面向对象程序设计等基本思想，掌握问题分解、模块化、抽象等核心概念，培养系统化解决问题的能力。' },
        { name: '离散数学基础', desc: '了解集合论、图论、组合数学等离散数学基础知识，理解其在算法设计与分析中的应用，为后续学习高级算法打下理论基础。' }
      ],
      interviewTestId: 'freshman-algo-1',
      studyPeriod: '3周'
    },
    {
      title: '编程语言基础',
      skills: [
        '掌握C/C++或Java等主流竞赛语言',
        '熟练使用基本语法与标准库',
        '理解变量、数据类型与内存管理',
        '掌握条件、循环等流程控制',
        '了解函数与模块化编程'
      ],
      techs: [
        { name: '语言选择与环境搭建', desc: '了解算法竞赛中常用的编程语言（C++、Java、Python等）的优缺点，选择适合自己的语言，配置开发环境，掌握编译、调试的基本技能。' },
        { name: '基本语法', desc: '系统学习所选语言的基础语法，包括变量声明、数据类型、运算符、表达式、注释等，养成良好的编码风格与习惯。' },
        { name: '流程控制', desc: '掌握条件语句（if-else、switch）、循环结构（for、while）的使用，理解循环嵌套与控制转移语句（break、continue）的应用，能实现基本的算法逻辑。' },
        { name: '函数与模块化', desc: '学习函数的定义、调用、参数传递、返回值等基本概念，理解作用域与生命周期，掌握递归函数的基本原理，能进行模块化程序设计。' },
        { name: '标准库使用', desc: '熟悉所选语言的标准库，特别是与算法竞赛相关的容器、算法、数学函数等，如C++的STL、Java的Collections Framework等，提高编程效率。' }
      ],
      interviewTestId: 'freshman-algo-2',
      studyPeriod: '4周'
    },
    {
      title: '基础数据结构',
      skills: [
        '掌握数组与字符串的操作技巧',
        '理解链表、栈、队列的实现与应用',
        '学习树与二叉树的基本操作',
        '了解哈希表的原理与使用',
        '能实现基本数据结构并应用于问题求解'
      ],
      techs: [
        { name: '数组与字符串', desc: '深入学习数组的存储结构与基本操作，掌握多维数组、动态数组的使用技巧，理解字符串处理的常用算法，如查找、匹配、分割等，解决相关基础问题。' },
        { name: '链表', desc: '理解单链表、双链表、循环链表的结构与实现，掌握链表的插入、删除、遍历等基本操作，学习链表在解决动态数据存储问题中的应用。' },
        { name: '栈与队列', desc: '学习栈（LIFO）与队列（FIFO）的抽象数据类型，掌握它们的实现方法与基本操作，理解在算法问题中的应用，如表达式求值、广度优先搜索等。' },
        { name: '树与二叉树', desc: '了解树的基本概念与术语，重点学习二叉树的性质与操作，掌握树的遍历方法（前序、中序、后序、层序），实现简单的二叉树算法。' },
        { name: '哈希表', desc: '理解哈希函数与冲突解决策略，学习哈希表的实现原理与常用操作，掌握在O(1)时间复杂度下实现查找、插入、删除的技术，解决高效查找问题。' }
      ],
      interviewTestId: 'freshman-algo-3',
      studyPeriod: '5周'
    },
    {
      title: '基础算法设计',
      skills: [
        '掌握枚举、递推、递归的基本思想',
        '理解分治、贪心算法的核心原理',
        '学习排序与查找的经典算法',
        '了解简单动态规划问题的求解',
        '能运用基本算法策略解决实际问题'
      ],
      techs: [
        { name: '枚举与模拟', desc: '掌握暴力枚举的实现技巧与优化方法，学习问题模拟的思路与步骤，理解在何时使用枚举策略，培养算法思维的基础。' },
        { name: '递推与递归', desc: '理解递推与递归的区别与联系，掌握递归函数的设计方法与边界条件处理，学习记忆化搜索技术，解决具有重叠子问题的递归问题。' },
        { name: '分治算法', desc: '学习分治策略的基本思想，掌握"分解-解决-合并"的问题解决模式，理解经典分治算法如归并排序、快速排序的实现原理与复杂度分析。' },
        { name: '贪心算法', desc: '理解贪心策略的核心思想与适用条件，学习贪心算法的设计步骤与证明方法，掌握经典贪心问题的解决思路，如区间调度、哈夫曼编码等。' },
        { name: '动态规划入门', desc: '了解动态规划的基本概念与"最优子结构"、"重叠子问题"特性，学习状态定义、转移方程构建的方法，解决简单的DP问题，如斐波那契数列、最长递增子序列等。' }
      ],
      interviewTestId: 'freshman-algo-4',
      studyPeriod: '5周'
    },
    {
      title: '图论基础',
      skills: [
        '理解图的表示与存储方式',
        '掌握图的遍历算法（DFS、BFS）',
        '学习最短路径算法',
        '了解最小生成树的求解方法',
        '能应用图论算法解决实际问题'
      ],
      techs: [
        { name: '图的基本概念', desc: '学习图的基本术语与性质，理解无向图、有向图、带权图等不同类型，掌握图的表示方法（邻接矩阵、邻接表）及其优缺点。' },
        { name: '图的遍历', desc: '深入学习深度优先搜索(DFS)与广度优先搜索(BFS)算法，掌握遍历的实现技巧与应用场景，理解连通性、拓扑排序等基于遍历的算法。' },
        { name: '最短路径算法', desc: '学习Dijkstra、Bellman-Ford、Floyd等经典最短路径算法，理解它们的适用条件与复杂度分析，掌握在不同图结构下选择合适算法的方法。' },
        { name: '最小生成树', desc: '理解最小生成树的概念与性质，学习Prim、Kruskal等经典算法的实现，掌握并查集数据结构在Kruskal算法中的应用。' },
        { name: '图论问题建模', desc: '学习如何将实际问题抽象为图论模型，掌握图的构建技巧与算法选择方法，提升问题抽象与建模能力。' }
      ],
      interviewTestId: 'freshman-algo-5',
      studyPeriod: '4周'
    },
    {
      title: '数学基础与组合数学',
      skills: [
        '掌握算法竞赛中常用的数学知识',
        '理解数论基础与常见算法',
        '学习排列组合与概率统计基础',
        '了解线性代数在算法中的应用',
        '能解决基于数学原理的算法问题'
      ],
      techs: [
        { name: '数论基础', desc: '学习整除性、素数、最大公约数、最小公倍数等基本概念，掌握欧几里得算法、筛法求素数等常用技术，理解模运算与同余的性质。' },
        { name: '组合数学', desc: '掌握排列、组合、二项式系数的计算方法，学习组合恒等式与递推关系，理解容斥原理、鸽笼原理等重要思想，解决计数问题。' },
        { name: '概率与期望', desc: '了解概率的基本概念与计算方法，学习随机算法的思想，掌握期望值的计算技巧，解决基于概率模型的算法问题。' },
        { name: '线性代数基础', desc: '学习矩阵运算与性质，理解线性方程组的求解方法，了解矩阵在图论、几何问题中的应用，为高级算法打下基础。' },
        { name: '数学问题建模', desc: '学习将算法问题转化为数学模型的思路与技巧，掌握数学分析与推导的方法，提升抽象思维与逻辑推理能力。' }
      ],
      interviewTestId: 'freshman-algo-6',
      studyPeriod: '4周'
    },
    {
      title: '竞赛实战与技巧',
      skills: [
        '掌握算法竞赛的解题策略',
        '学习代码调试与优化技巧',
        '理解题目分析与建模方法',
        '了解时间管理与团队协作',
        '积累竞赛经验与解题思路'
      ],
      techs: [
        { name: '竞赛环境适应', desc: '了解主流算法竞赛（如ACM-ICPC、CCPC、蓝桥杯等）的规则与环境，掌握在线评测系统（如Codeforces、LeetCode等）的使用方法，适应竞赛模式。' },
        { name: '解题策略', desc: '学习算法竞赛的解题思路与策略，包括问题分类、算法选择、复杂度估计等，掌握从简单到复杂、从特殊到一般的思考方法，提高解题效率。' },
        { name: '代码调试技巧', desc: '掌握竞赛环境下的调试方法，学习常见错误（如边界条件、整数溢出、精度问题）的识别与修复，提高代码正确性与鲁棒性。' },
        { name: '优化与效率', desc: '学习代码优化的基本技巧，理解常数优化、内存优化的方法，掌握算法实现的高效技巧，避免超时与超内存错误。' },
        { name: '模拟竞赛训练', desc: '参与模拟竞赛与在线比赛，积累实战经验，学习时间分配、题目选择的策略，培养竞赛心态与抗压能力。' }
      ],
      interviewTestId: 'freshman-algo-7',
      studyPeriod: '4周'
    },
    {
      title: '算法专题训练',
      skills: [
        '深入理解动态规划的高级应用',
        '掌握字符串算法与数据结构',
        '学习计算几何的基本算法',
        '了解网络流与匹配算法',
        '能解决各类专题算法问题'
      ],
      techs: [
        { name: '动态规划进阶', desc: '深入学习动态规划的高级技巧，如状态压缩DP、区间DP、树形DP等，掌握复杂DP问题的状态设计与转移方程构建方法，提升解决动态规划问题的能力。' },
        { name: '字符串算法', desc: '学习KMP、Trie树、后缀数组等字符串处理算法与数据结构，理解字符串匹配、查找的高效算法，解决文本处理与模式匹配问题。' },
        { name: '计算几何基础', desc: '了解计算几何的基本概念与常用算法，学习点、线、多边形的表示与操作，掌握凸包、线段相交等基础算法，解决简单的几何问题。' },
        { name: '网络流入门', desc: '理解网络流的基本概念与模型，学习最大流、最小割等经典算法，了解二分图匹配问题，掌握网络流在资源分配、调度问题中的应用。' },
        { name: '专题训练', desc: '针对各类算法专题进行系统训练，如搜索与剪枝、贪心策略、数学问题等，通过大量习题巩固算法知识，提升综合解题能力。' }
      ],
      interviewTestId: 'freshman-algo-8',
      studyPeriod: '5周'
    },
    {
      title: '面试准备与职业规划',
      skills: [
        '掌握算法面试的解题技巧',
        '准备个人项目与竞赛经历',
        '学习技术沟通与代码表达',
        '了解算法相关岗位与职业路径',
        '制定个性化学习计划与目标'
      ],
      techs: [
        { name: '算法面试题库', desc: '系统梳理技术面试中常见的算法题型与解题思路，掌握数组、链表、树、图、动态规划等各类题目的分析方法，形成结构化的知识体系。' },
        { name: '竞赛经历准备', desc: '学习如何在简历与面试中展示算法竞赛经历，提炼参赛过程中的技术亮点与成长收获，准备典型题目的解题思路讲解，展示算法思维能力。' },
        { name: '现场编码训练', desc: '模拟面试中的白板编程或在线编程环境，练习在有限时间内分析问题、设计算法、编写代码的能力，提高代码表达的清晰度与准确性。' },
        { name: '算法岗位认知', desc: '了解算法工程师、研发工程师、量化分析师等与算法相关的职业方向，认识不同岗位的能力要求与发展路径，为职业规划提供参考。' },
        { name: '学习计划制定', desc: '基于个人兴趣与目标，制定算法能力提升的长期学习计划，包括竞赛参与、项目实践、理论学习等方面，设定阶段性目标与评估方法。' }
      ],
      interviewTestId: 'freshman-algo-9',
      studyPeriod: '3周'
    }
  ],
};

export const QUESTIONS: { [key: string]: string[] } = {
  // 前端方向
  '大一-frontend': [
    'HTML 和 CSS 有什么区别？',
    '如何用 CSS 实现居中？',
    'HTML 常用标签有哪些？',
    '如何插入图片和链接？',
    '什么是盒模型？',
  ],
  '大二-frontend': [
    '网络与浏览器进阶',
    'JavaScript高级特性与设计模式',
    'ES6+与TypeScript',
    'React生态系统开发',
    'Vue生态系统开发',
  ],
  '大三-frontend': [
    '请简述框架进阶与原理剖析',
    '请简述前端工程化深度实践',
    '请简述现代CSS与设计系统',
    '请简述前端性能优化专题',
    '请简述现代API与浏览器技术',
    '请简述Node.js全栈开发',
    '请简述数据可视化与图形编程',
    '请简述大型项目实战与架构设计',
    '请简述 React 的核心思想。',
    '什么是组件的生命周期？',
    'Redux 的作用是什么？',
    '前后端如何进行数据交互？',
    '如何进行团队协作开发？',
  ],
  '大四-frontend': [
    'Webpack 和 Vite 有什么区别？',
    '如何优化前端性能？',
    'SSR 和 SSG 有什么区别？',
    '前端安全常见问题有哪些？',
    '如何准备前端面试？',
  ],
  // 后端-Python方向
  '大一-backend-python': [
    'Python 和其他语言的区别？',
    '如何声明变量？',
    'if/else 的基本用法？',
    '如何定义函数？',
    '什么是列表和字典？',
  ],
  '大二-backend-python': [
    '什么是面向对象？',
    '如何导入模块？',
    'Flask 的基本用法？',
    'MySQL 基础操作有哪些？',
    'ORM 有什么作用？',
  ],
  '大三-backend-python': [
    'Django 和 Flask 的区别？',
    '什么是 RESTful API？',
    '如何进行用户认证？',
    '如何设计数据库表结构？',
    '项目部署的常见方式有哪些？',
  ],
  '大四-backend-python': [
    '什么是微服务？',
    'Celery 的作用是什么？',
    '如何进行 SQL 优化？',
    '后端安全常见问题有哪些？',
    '如何准备后端面试？',
  ],
  // 后端-Java方向
  '大一-backend-java': [
    'Java 和 Python 有什么区别？',
    '如何声明变量？',
    'if/else 的基本用法？',
    '什么是类和对象？',
    '如何定义方法？',
  ],
  '大二-backend-java': [
    '什么是集合？',
    '如何处理异常？',
    'Servlet 的作用是什么？',
    'JDBC 如何连接数据库？',
    '泛型的作用是什么？',
  ],
  '大三-backend-java': [
    'Spring 框架的核心思想？',
    'MyBatis 的作用是什么？',
    '如何设计 RESTful API？',
    '前后端如何分离？',
    '如何进行项目实战？',
  ],
  '大四-backend-java': [
    '什么是微服务架构？',
    'Spring Cloud 的作用？',
    '如何进行 SQL 优化？',
    '后端安全常见问题有哪些？',
    '如何准备后端面试？',
  ],
  // AI能力提升方向
  '大一-ai': [
    'AI 和传统编程有什么不同？',
    '如何学习 Python 编程？',
    '线性代数在机器学习中的作用？',
    '什么是监督学习？',
    '无监督学习有哪些应用？',
  ],
  '大二-ai': [
    '深度学习与传统机器学习的区别？',
    '如何使用 TensorFlow 进行模型训练？',
    '数据清洗的步骤有哪些？',
    '什么是集成学习？',
    'AI 在金融领域的应用有哪些？',
  ],
  '大三-ai': [
    '大语言模型与传统语言模型的区别？',
    '如何使用 Transformer 进行自然语言处理？',
    'AIGC 的应用场景有哪些？',
    'AI 伦理与法规的重要性？',
    'AI 在医疗领域的应用有哪些？',
  ],
  '大四-ai': [
    'AI 行业的未来发展趋势是什么？',
    '如何进行 AI 项目的市场分析？',
    'AI 创业的难点有哪些？',
    'AI 在教育领域的应用有哪些？',
    'AI 与人类伦理的关系是什么？',
  ],
  // 产品经理方向
  '大一-pm': [
    '产品经理与项目经理的区别？',
    '如何进行需求分析？',
    '什么是 M 型组织结构？',
    '如何进行产品创新？',
    '产品经理的沟通技巧有哪些？',
  ],
  '大二-pm': [
    '产品生命周期管理的重要性？',
    '如何进行产品路线图规划？',
    '什么是 MVP？',
    '如何进行产品用户体验优化？',
    '产品经理如何进行数据分析？',
  ],
  '大三-pm': [
    '产品战略与产品规划的关系？',
    '如何进行需求池管理？',
    '如何进行产品版本规划？',
    '产品经理如何进行技术协作？',
    '如何进行产品市场分析？',
  ],
  '大四-pm': [
    '产品经理的职业发展路径是什么？',
    '如何进行产品创新与市场定位？',
    '如何进行产品团队管理？',
    '产品经理如何进行行业分析？',
    '如何进行产品市场推广？',
  ],
  // 算法与竞赛方向
  '大一-algo': [
    '算法与数据结构的关系是什么？',
    '如何进行算法复杂度分析？',
    '什么是递归与分治？',
    '如何进行算法题训练？',
    'ACM/ICPC 竞赛的规则是什么？',
  ],
  '大二-algo': [
    '如何进行算法优化？',
    '什么是贪心算法？',
    '如何进行算法竞赛实战？',
    '竞赛经验对算法学习的重要性？',
    '算法与编程语言的关系是什么？',
  ],
  '大三-algo': [
    '高级数据结构与传统数据结构的区别？',
    '如何进行算法竞赛与论文撰写？',
    '竞赛经验对算法行业的影响？',
    '如何进行算法创新与实践？',
    '算法与编程语言的结合点是什么？',
  ],
  '大四-algo': [
    '算法行业的发展趋势是什么？',
    '如何进行算法项目的市场分析？',
    '算法创业的难点有哪些？',
    '如何进行算法团队管理？',
    '算法与编程语言的结合点是什么？',
  ],
}; 